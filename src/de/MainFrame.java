/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 6, 2011, 11:25:30 AM
 */
package de;

import ij.process.ByteProcessor;

import ij.process.ShortProcessor;
import ij.ImagePlus;
import ij.IJ;
import ij.io.FileSaver;
import javax.swing.JOptionPane;
import org.micromanager.api.ScriptInterface;
import org.micromanager.api.DeviceControlGUI;
import org.micromanager.api.MMListenerInterface;
import org.micromanager.utils.ReportingUtils;
import org.micromanager.utils.MMScriptException;
import mmcorej.CMMCore;
import mmcorej.MMCoreJ;

/**
 *
 * @author Demo
 */
public class MainFrame extends javax.swing.JFrame {

    protected ScriptInterface gui_;
    //protected final DeviceControlGUI dGui;
    protected final CMMCore core_;
    protected String currentCamera;    
    
    /** Creates new form MainFrame */
    public MainFrame(ScriptInterface gui) {
        initComponents();
        setTitle("Direct Electron GUI");
        gui_ = gui;
        core_ = gui_.getMMCore();
        currentCamera = core_.getCameraDevice();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        snapButton = new javax.swing.JButton();
        snapSaveButton = new javax.swing.JButton();
        darkButton = new javax.swing.JButton();
        gainButton = new javax.swing.JButton();
        StatusText = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        snapButton.setText("Snap for display only");
        snapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButtonActionPerformed(evt);
            }
        });

        snapSaveButton.setText("Snap with autosave");
        snapSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapSaveButtonActionPerformed(evt);
            }
        });

        darkButton.setText("Acquire Dark Reference");
        darkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkButtonActionPerformed(evt);
            }
        });

        gainButton.setText("Acquire Gain Reference");
        gainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainButtonActionPerformed(evt);
            }
        });

        StatusText.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(StatusText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(snapButton)
                            .addComponent(snapSaveButton))
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gainButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(darkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(60, 60, 60))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {snapButton, snapSaveButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(darkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gainButton, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(snapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(snapSaveButton)))
                .addGap(10, 10, 10)
                .addComponent(StatusText, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {snapButton, snapSaveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
private void gainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainButtonActionPerformed
// Take 1 second of gain reference
    int choice = JOptionPane.showConfirmDialog(null,"You are about to acquire an uniform illumination image (1 sec) as the flat field reference. Are you sure?", "Gain Reference Acquisition", JOptionPane.YES_NO_OPTION);
    if (choice!=0) return; //YES=0 to continue
    try{                
        String original_value = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //store the original value
        core_.setProperty(currentCamera, "Exposure Time (seconds)", "1.0"); //set to 1 sec exposure        
        core_.setProperty(currentCamera, "Exposure Mode", "Gain"); //set to gain reference acquisition
        gui_.refreshGUI(); //update exposure time in the GUI
        gui_.snapSingleImage();
        core_.setProperty(currentCamera, "Exposure Mode", "Normal"); //set to normal acquisition
        core_.setProperty(currentCamera, "Exposure Time (seconds)", original_value); //set to the original value
        StatusText.setText("Gain reference acquired");
        gui_.refreshGUI();
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
   }
}//GEN-LAST:event_gainButtonActionPerformed

private void snapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButtonActionPerformed
// Snap a single image without autosaving
    try{
        String original_value = core_.getProperty(currentCamera, "Autosave Summed Image"); //store the original value
        core_.setProperty(currentCamera, "Autosave Summed Image", "Discard");
        gui_.snapSingleImage();
        core_.setProperty(currentCamera, "Autosave Summed Image", original_value); //set to the original value
        StatusText.setText("A new image acquired for display only.");
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }    
}//GEN-LAST:event_snapButtonActionPerformed

private void darkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkButtonActionPerformed
// Take 1 second of dark reference
    int choice = JOptionPane.showConfirmDialog(null,"You are about to acquire a new dark reference (1 sec). Are you sure?", "Dark Reference Acquisition", JOptionPane.YES_NO_OPTION);
    if (choice!=0) return; //YES=0 to continue
    try{        
        String original_value = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //store the original value
        core_.setProperty(currentCamera, "Exposure Time (seconds)", "1.0"); //set to 1 sec exposure                
        core_.setProperty(currentCamera, "Exposure Mode", "Dark"); //set to dark reference acquisition
        gui_.refreshGUI(); //update exposure time in the GUI
        gui_.snapSingleImage();
        core_.setProperty(currentCamera, "Exposure Mode", "Normal"); //set back to normal acquisition        
        core_.setProperty(currentCamera, "Exposure Time (seconds)", original_value); //set to the original value
        StatusText.setText("Dark reference acquired");
        gui_.refreshGUI();
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }
}//GEN-LAST:event_darkButtonActionPerformed

private void snapSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapSaveButtonActionPerformed
// Snap a new image with autosave flag turned on
    try{
        String original_value = core_.getProperty(currentCamera, "Autosave Summed Image"); //store the original value
        core_.setProperty(currentCamera, "Autosave Summed Image", "Save");
        gui_.snapSingleImage();
        core_.setProperty(currentCamera, "Autosave Summed Image", original_value); //set to the original value
        StatusText.setText("A new image acquired with autosaving turned on.");
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }
}//GEN-LAST:event_snapSaveButtonActionPerformed

    /**
     * @param args the command line arguments
     */

   public static void main(String args[]) {
        /* Set the Nimbus look and feel */

       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
   
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new MainFrame(gui_).setVisible(true);
            }
        });
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField StatusText;
    private javax.swing.JButton darkButton;
    private javax.swing.JButton gainButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton snapButton;
    private javax.swing.JButton snapSaveButton;
    // End of variables declaration//GEN-END:variables
}
