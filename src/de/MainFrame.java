/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 6, 2011, 11:25:30 AM
 */
package de;

import java.util.*;
import ij.process.ByteProcessor;

import ij.process.ShortProcessor;
import ij.process.ImageProcessor;
import ij.ImagePlus;
import ij.IJ;
import ij.io.FileSaver;
import javax.swing.JOptionPane;
import org.micromanager.api.ScriptInterface;
import org.micromanager.api.DeviceControlGUI;
import org.micromanager.api.MMListenerInterface;
import org.micromanager.utils.ReportingUtils;
import org.micromanager.utils.MMScriptException;
import mmcorej.CMMCore;
import mmcorej.MMCoreJ;
import org.micromanager.utils.ImageUtils;

/**
 *
 * @author Demo
 */
public class MainFrame extends javax.swing.JFrame {

    protected ScriptInterface gui_;
    protected final DeviceControlGUI dGui_;
    protected final CMMCore core_;
    protected String currentCamera;    
    protected Map<String, String> stored_property_list; 

    /** Creates new form MainFrame */
    public MainFrame(ScriptInterface gui) {
        initComponents();
        setTitle("Direct Electron GUI");
        gui_ = gui;
        core_ = gui_.getMMCore();
        dGui_ = (DeviceControlGUI) gui_;
        currentCamera = core_.getCameraDevice();
        stored_property_list = new HashMap<String,String>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        snapButton1 = new javax.swing.JButton();
        snapSaveButton = new javax.swing.JButton();
        darkButton = new javax.swing.JButton();
        gainButton = new javax.swing.JButton();
        exposure1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        exposure2 = new javax.swing.JTextField();
        snapButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        save_final_image = new javax.swing.JCheckBox();
        save_raw_data = new javax.swing.JCheckBox();
        save_sum_images = new javax.swing.JCheckBox();
        save_sum_images_count = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        exposure3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        binning1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        binning2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        binning3 = new javax.swing.JTextField();
        exposure_dark = new javax.swing.JTextField();
        exposure_gain = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CameraStatusText = new javax.swing.JTextArea();
        CorrectionMode1 = new javax.swing.JComboBox();
        CorrectionMode2 = new javax.swing.JComboBox();
        CorrectionMode3 = new javax.swing.JComboBox();
        StatusText = new javax.swing.JFormattedTextField();
        Smooth1 = new javax.swing.JCheckBox();
        Smooth2 = new javax.swing.JCheckBox();
        Smooth3 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(445, 332));

        snapButton1.setText("Snap for display only");
        snapButton1.setToolTipText("Snap an image for display without saving to disk");
        snapButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButton1ActionPerformed(evt);
            }
        });

        snapSaveButton.setText("Snap with autosave");
        snapSaveButton.setToolTipText("Acquire an image for display without saving to disk");
        snapSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapSaveButtonActionPerformed(evt);
            }
        });

        darkButton.setText("Acquire Dark Reference");
        darkButton.setToolTipText("<html>Acquire a new dark reference<br />(beam will be  blanked automatically by the shutter control box)</html>");
        darkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkButtonActionPerformed(evt);
            }
        });

        gainButton.setText("Acquire Gain Reference");
        gainButton.setToolTipText("<html>Acquire a new gain reference<br />(please navigate to an empty area and set up the beam intensity to match similar brightness as final images)</html>");
        gainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainButtonActionPerformed(evt);
            }
        });

        exposure1.setText("500");
        exposure1.setToolTipText("Exposure time in milliseconds");
        exposure1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure1ActionPerformed(evt);
            }
        });

        jLabel1.setText("msec");

        exposure2.setText("1000");
        exposure2.setToolTipText("Exposure time in milliseconds");
        exposure2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure2ActionPerformed(evt);
            }
        });

        snapButton2.setText("Snap for display only");
        snapButton2.setToolTipText("Snap an image for display without saving to disk");
        snapButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("msec");

        jLabel3.setText("CONDITION 1");

        jLabel4.setText("CONDITION 2");

        jLabel5.setText("CONDITION 3");

        save_final_image.setSelected(true);
        save_final_image.setText("Final Image");
        save_final_image.setToolTipText("Enable saving of the final return image to disk.");
        save_final_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_final_imageActionPerformed(evt);
            }
        });

        save_raw_data.setText("Raw Data");
        save_raw_data.setToolTipText("Enable saving of raw frames to disk");

        save_sum_images.setText("Sum Images");
        save_sum_images.setToolTipText("<html>Enable saving of summed images to disk. <br />Summed images are the sum of sub-groups of multiple frames.</html>");
        save_sum_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_sum_imagesActionPerformed(evt);
            }
        });

        save_sum_images_count.setText("0");
        save_sum_images_count.setToolTipText("<html>Summed image count<br />Number of frames in each grouped summed image. 0 means all frames summed together.</html>");
        save_sum_images_count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_sum_images_countActionPerformed(evt);
            }
        });

        jLabel6.setText("Sum Image Count");

        exposure3.setText("1000");
        exposure3.setToolTipText("Exposure time in milliseconds");
        exposure3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure3ActionPerformed(evt);
            }
        });

        jLabel7.setText("msec");

        binning1.setText("1");
        binning1.setToolTipText("Binning");

        jLabel8.setText("Bin");

        jLabel9.setText("Bin");

        binning2.setText("1");
        binning2.setToolTipText("Binning");

        jLabel10.setText("Bin");

        binning3.setText("1");
        binning3.setToolTipText("Binning");

        exposure_dark.setText("2000");
        exposure_dark.setToolTipText("Exposure time in milliseconds for dark reference");
        exposure_dark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure_darkActionPerformed(evt);
            }
        });

        exposure_gain.setText("2000");
        exposure_gain.setToolTipText("Exposure time in milliseconds for gain reference");
        exposure_gain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure_gainActionPerformed(evt);
            }
        });

        jLabel11.setText("msec");

        jLabel12.setText("msec");

        UpdateButton.setText("Update");
        UpdateButton.setToolTipText("Manually update camera status");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Camera Status");

        CameraStatusText.setColumns(30);
        CameraStatusText.setEditable(false);
        CameraStatusText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CameraStatusText.setLineWrap(true);
        CameraStatusText.setRows(6);
        CameraStatusText.setToolTipText("Camera status information (temperature, faraday reading)");
        jScrollPane1.setViewportView(CameraStatusText);

        CorrectionMode1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gain and Dark Corrected", "Uncorrected Raw", "Dark Corrected" }));
        CorrectionMode1.setToolTipText("Correction Mode");

        CorrectionMode2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gain and Dark Corrected", "Uncorrected Raw", "Dark Corrected" }));
        CorrectionMode2.setToolTipText("Correction Mode");

        CorrectionMode3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gain and Dark Corrected", "Uncorrected Raw", "Dark Corrected" }));
        CorrectionMode3.setToolTipText("Correction Mode");

        StatusText.setToolTipText("Displays results of actions in the GUI.");
        StatusText.setEnabled(false);
        StatusText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusTextActionPerformed(evt);
            }
        });

        Smooth1.setText("Smooth");
        Smooth1.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        Smooth1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Smooth1ActionPerformed(evt);
            }
        });

        Smooth2.setText("Smooth");
        Smooth2.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        Smooth2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Smooth2ActionPerformed(evt);
            }
        });

        Smooth3.setText("Smooth");
        Smooth3.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        Smooth3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Smooth3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(29, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(UpdateButton))
                                .addComponent(StatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(save_final_image)
                                .addGap(11, 11, 11)
                                .addComponent(save_raw_data)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(save_sum_images)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(save_sum_images_count, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(darkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(exposure_dark, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)
                                        .addGap(30, 30, 30)
                                        .addComponent(gainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(exposure_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(snapButton1)
                                            .addComponent(snapButton2)
                                            .addComponent(snapSaveButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(exposure1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                                            .addComponent(exposure3, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                                            .addComponent(exposure2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Smooth1)
                                            .addComponent(Smooth2)
                                            .addComponent(Smooth3))
                                        .addGap(7, 7, 7)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CorrectionMode3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CorrectionMode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CorrectionMode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(binning1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(binning2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(binning3)))))
                .addGap(12, 12, 12))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {snapButton1, snapSaveButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exposure1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(snapButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(CorrectionMode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(binning1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Smooth1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exposure2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(CorrectionMode2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binning2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(Smooth2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(snapButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(snapSaveButton)
                    .addComponent(jLabel5)
                    .addComponent(exposure3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(CorrectionMode3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(binning3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Smooth3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(save_final_image)
                    .addComponent(save_raw_data)
                    .addComponent(save_sum_images)
                    .addComponent(jLabel6)
                    .addComponent(save_sum_images_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exposure_gain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(darkButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(exposure_dark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(StatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(UpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {snapButton1, snapSaveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
private void gainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainButtonActionPerformed
// Take gain reference
    int exposure_time = 0;
    try {
        exposure_time = Integer.parseInt(exposure_gain.getText());
    } catch (NumberFormatException e) {
        exposure_time = 0;
    }
    if (exposure_time!=0){
        int choice = JOptionPane.showConfirmDialog(null,"You are about to acquire an uniform illumination image ("+Integer.toString(exposure_time)+" millisec) as the flat field reference. Are you sure?", "Gain Reference Acquisition", JOptionPane.YES_NO_OPTION);
        if (choice!=0) return; //YES=0 to continue
        try{
            StoreOriginalSettings();
            core_.setProperty(currentCamera, "Correction Mode", "Dark Corrected"); //set to dark corrected for the gain reference
            UpdateAutoSavingOptions("Save", "Save", "Discard"); //store raw frames for gain reference
            double exp_time = exposure_time/1000.0;
            String exp_time_value = Double.toString(exp_time);
            core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
            String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
            core_.setProperty(currentCamera, "Binning", "1");
            core_.setProperty(currentCamera, "Exposure Mode", "Gain"); //set to gain reference acquisition
            core_.snapImage();
            short[] img = (short[])core_.getImage(); 
            gui_.displayImage(img);
            RestoreOriginalSettings();
            StatusText.setText("Gain reference acquired with "+actual_exp_time+" seconds exposure.");
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
       }
    } else 
        StatusText.setText("Incorrect exposure setting. ");
    
    UpdateCameraStatus(); 
}//GEN-LAST:event_gainButtonActionPerformed

private void snapButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButton1ActionPerformed
// Snap a single image without autosaving
    try{        
        int exposure_time = 0;
        try {
            exposure_time = Integer.parseInt(exposure1.getText());
        } catch (NumberFormatException e) {
            exposure_time = 0;
        }
        int binning_option = 1;
        try {
            binning_option = Integer.parseInt(binning1.getText());
        } catch (NumberFormatException e) {
            binning_option = 1;
        }
        if (exposure_time != 0){
            StoreOriginalSettings(); //store the original values
            core_.setProperty(currentCamera, "Correction Mode", CorrectionMode1.getSelectedItem().toString()); 
            UpdateAutoSavingOptions("Discard", "Discard", "Discard"); //store raw frames for gain reference
            core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
            double exp_time = exposure_time/1000.0;
            String exp_time_value = Double.toString(exp_time);
            core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
            String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
            core_.snapImage();
            if (Smooth1.isSelected()){
                ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                image_data.smooth();
                gui_.displayImage(image_data.getPixels());
            } else 
                gui_.displayImage(core_.getImage());
            RestoreOriginalSettings(); //restore original values
            StatusText.setText("A new image acquired for display only with exposure time of " + actual_exp_time + " seconds.");
        } else 
            StatusText.setText("Incorrect exposure setting. ");
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }
    UpdateCameraStatus(); 
}//GEN-LAST:event_snapButton1ActionPerformed

private void darkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkButtonActionPerformed
// Take dark reference
    int exposure_time = 0;
    try {
        exposure_time = Integer.parseInt(exposure_dark.getText());
    } catch (NumberFormatException e) {
        exposure_time = 0;
    }
    if (exposure_time!=0){
        int choice = JOptionPane.showConfirmDialog(null,"You are about to acquire a new dark reference ("+Integer.toString(exposure_time)+" millisec). Are you sure?", "Dark Reference Acquisition", JOptionPane.YES_NO_OPTION);
        if (choice!=0) return; //YES=0 to continue
        try{
            StoreOriginalSettings(); //store the original values            
            core_.setProperty(currentCamera, "Correction Mode", "Uncorrected Raw"); //set to uncorrected for the dark reference
            UpdateAutoSavingOptions("Save", "Save", "Discard"); //store raw frames for dark reference
            double exp_time = exposure_time/1000.0;
            String exp_time_value = Double.toString(exp_time);
            core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
            String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
            core_.setProperty(currentCamera, "Binning", "1");
            core_.setProperty(currentCamera, "Exposure Mode", "Dark"); //set to dark reference acquisition
            core_.snapImage();
            short[] img = (short[])core_.getImage(); 
            gui_.displayImage(img);
            RestoreOriginalSettings(); //restore original values
            StatusText.setText("Dark reference acquired with "+actual_exp_time+" seconds exposure.");
            gui_.refreshGUI();
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
    } else
        StatusText.setText("Incorrect exposure setting. ");
    
    UpdateCameraStatus(); 
}//GEN-LAST:event_darkButtonActionPerformed

private void snapSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapSaveButtonActionPerformed
// Snap a new image with autosave flag turned on
    try{
        int exposure_time = 0;
        try {
            exposure_time = Integer.parseInt(exposure3.getText());
        } catch (NumberFormatException e) {
            exposure_time = 0;
        }
        int binning_option = 1;
        try {
            binning_option = Integer.parseInt(binning3.getText());
        } catch (NumberFormatException e) {
            binning_option = 1;
        }
        int sum_image_count = 0;
        try {
            sum_image_count = Integer.parseInt(save_sum_images_count.getText());
        } catch (NumberFormatException e) {
            sum_image_count = 0;
        }
        if (exposure_time!=0){
            StoreOriginalSettings(); //store the original values
            core_.setProperty(currentCamera, "Correction Mode", CorrectionMode3.getSelectedItem().toString()); 
            core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
            UpdateAutoSavingOptions((save_final_image.isSelected())? "Save" : "Discard", (save_raw_data.isSelected())? "Save" : "Discard", (save_sum_images.isSelected())? "Save" : "Discard");
            core_.setProperty(currentCamera, "Autosave Sum Frames - Sum Count", sum_image_count);
            double exp_time = exposure_time/1000.0;
            String exp_time_value = Double.toString(exp_time);
            core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
            String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
            core_.snapImage();
            if (Smooth3.isSelected()){
                ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                image_data.smooth();
                gui_.displayImage(image_data.getPixels());
            } else 
                gui_.displayImage(core_.getImage());
            RestoreOriginalSettings(); //restore original values
            StatusText.setText("A new image acquired with exposure time of " + actual_exp_time + " seconds.");
        } else
            StatusText.setText("Incorrect exposure setting. ");
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }    
    UpdateCameraStatus(); 
}//GEN-LAST:event_snapSaveButtonActionPerformed

private void exposure1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exposure1ActionPerformed

private void exposure2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exposure2ActionPerformed

private void snapButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButton2ActionPerformed
// Snap a single image without autosaving
    try{        
        int exposure_time = 0;
        try {
            exposure_time = Integer.parseInt(exposure2.getText());
        } catch (NumberFormatException e) {
            exposure_time = 0;
        }
        int binning_option = 1;
        try {
            binning_option = Integer.parseInt(binning2.getText());
        } catch (NumberFormatException e) {
            binning_option = 1;
        }
        if (exposure_time != 0){
            StoreOriginalSettings(); //store the original values
            core_.setProperty(currentCamera, "Correction Mode", CorrectionMode2.getSelectedItem().toString()); 
            UpdateAutoSavingOptions("Discard", "Discard", "Discard");
            core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
            double exp_time = exposure_time/1000.0;
            String exp_time_value = Double.toString(exp_time);
            core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
            String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
            core_.snapImage();
            if (Smooth2.isSelected()){
                ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                image_data.smooth();
                gui_.displayImage(image_data.getPixels());
            } else 
                gui_.displayImage(core_.getImage());
            RestoreOriginalSettings(); //restore original values
            StatusText.setText("A new image acquired for display only with exposure time of " + actual_exp_time + " seconds.");
        } else 
            StatusText.setText("Incorrect exposure setting. ");
    }catch (Exception ex) {
        ReportingUtils.showError(ex);
    }   
    UpdateCameraStatus(); 
}//GEN-LAST:event_snapButton2ActionPerformed

private void save_final_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_final_imageActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_save_final_imageActionPerformed

private void save_sum_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_sum_imagesActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_save_sum_imagesActionPerformed

private void save_sum_images_countActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_sum_images_countActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_save_sum_images_countActionPerformed

private void exposure3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure3ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exposure3ActionPerformed

private void exposure_darkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure_darkActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exposure_darkActionPerformed

private void exposure_gainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure_gainActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_exposure_gainActionPerformed

    private void StatusTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusTextActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        UpdateCameraStatus();
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void Smooth1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Smooth1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Smooth1ActionPerformed

    private void Smooth3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Smooth3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Smooth3ActionPerformed

    private void Smooth2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Smooth2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Smooth2ActionPerformed

    private void UpdateCameraStatus() {
        try{
            String displayText = "";
            String position = core_.getProperty(currentCamera, "Camera Position"); 
            String temperature = core_.getProperty(currentCamera, "Temperature - Detector (Celsius)"); 
            String instant_intensity = core_.getProperty(currentCamera, "Faraday Plate - Beam Density (pA/cm^2)"); 
            displayText += "Camera position: " + position + "\n";
            displayText += "Detector temperature: " + temperature + " Celsius.\n";
            displayText += "Faraday plate instantaneous reading: " + instant_intensity + " pA/cm2.\n";
            String peak_intensity = core_.getProperty(currentCamera, "Faraday Plate - Last Exposure Peak Density (pA/cm^2)"); 
            String peak_dose_rate = core_.getProperty(currentCamera, "Faraday Plate - Last Exposure Peak Density (electron/pixel/second)"); 
            String last_exposure_total_dose = core_.getProperty(currentCamera, "Faraday Plate - Total Dose in Last Exposure (electron/pixel)");             
            displayText += "Last exposure (total dose): " + last_exposure_total_dose + " el-/pixel.\n";
            displayText += "Last exposure (peak intensity): " + peak_intensity + " pA/cm2 or " + peak_dose_rate + " el-/px/sec.\n";
            CameraStatusText.setText( displayText );
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
        }   
    }
    
    private void UpdateAutoSavingOptions(String save_final, String save_raw, String save_summed) {
        try{
            core_.setProperty(currentCamera, "Autosave Final Image", save_final);
            core_.setProperty(currentCamera, "Autosave Raw Frames", save_raw);
            core_.setProperty(currentCamera, "Autosave Summed Image", save_summed);
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
        }   
    }
    
    private void StoreOriginalSettings() {
        try{
            stored_property_list.clear();
            String property_title = "";
            property_title = "Autosave Final Image"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Raw Frames"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Summed Image"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Sum Frames - Sum Count"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Binning"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Exposure Time (seconds)"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Exposure Mode"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Correction Mode"; stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));            
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
        }   
    }    
                    
    private void RestoreOriginalSettings() {
        try{
            for (Map.Entry<String, String> entry : stored_property_list.entrySet()){
                core_.setProperty(currentCamera, entry.getKey(), entry.getValue());
            }
        }catch (Exception ex) {
            ReportingUtils.showError(ex);
        }   
    }
    
    /**
     * @param args the command line arguments
     */

   public static void main(String args[]) {
        /* Set the Nimbus look and feel */

       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
   
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new MainFrame(gui_).setVisible(true);
            }
        });
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CameraStatusText;
    private javax.swing.JComboBox CorrectionMode1;
    private javax.swing.JComboBox CorrectionMode2;
    private javax.swing.JComboBox CorrectionMode3;
    private javax.swing.JCheckBox Smooth1;
    private javax.swing.JCheckBox Smooth2;
    private javax.swing.JCheckBox Smooth3;
    private javax.swing.JFormattedTextField StatusText;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTextField binning1;
    private javax.swing.JTextField binning2;
    private javax.swing.JTextField binning3;
    private javax.swing.JButton darkButton;
    private javax.swing.JTextField exposure1;
    private javax.swing.JTextField exposure2;
    private javax.swing.JTextField exposure3;
    private javax.swing.JTextField exposure_dark;
    private javax.swing.JTextField exposure_gain;
    private javax.swing.JButton gainButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox save_final_image;
    private javax.swing.JCheckBox save_raw_data;
    private javax.swing.JCheckBox save_sum_images;
    private javax.swing.JTextField save_sum_images_count;
    private javax.swing.JButton snapButton1;
    private javax.swing.JButton snapButton2;
    private javax.swing.JButton snapSaveButton;
    // End of variables declaration//GEN-END:variables
}
