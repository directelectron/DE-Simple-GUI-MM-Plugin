/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 6, 2011, 11:25:30 AM
 */
package de;

import de.tools.ObjectReader;
import de.tools.ObjectWriter;
import java.util.*;
import ij.process.ImageProcessor;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.micromanager.api.ScriptInterface;
import org.micromanager.api.DeviceControlGUI;
import org.micromanager.utils.ReportingUtils;
import mmcorej.CMMCore;
import org.micromanager.utils.ImageUtils;

/**
 *
 * @author Demo
 */
public class MainFrame extends javax.swing.JFrame {

    protected ScriptInterface gui_;
    protected final DeviceControlGUI dGui_;
    protected final CMMCore core_;
    protected String currentCamera;
    protected Map<String, String> stored_property_list;
    protected boolean ignoreRetractedWarning;
    NoticeWaitDialog extend_dialog;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(ScriptInterface gui) {
        initComponents();
        setTitle("Direct Electron GUI");
        gui_ = gui;
        core_ = gui_.getMMCore();
        dGui_ = (DeviceControlGUI) gui_;
        currentCamera = core_.getCameraDevice();
        stored_property_list = new HashMap<String, String>();
        ignoreRetractedWarning = false;
        UpdateCameraStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        snapButton1 = new javax.swing.JButton();
        snapSaveButton = new javax.swing.JButton();
        darkButton = new javax.swing.JButton();
        gainButton = new javax.swing.JButton();
        exposure1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        exposure2 = new javax.swing.JTextField();
        snapButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        save_final_image = new javax.swing.JCheckBox();
        save_raw_data = new javax.swing.JCheckBox();
        save_sum_images = new javax.swing.JCheckBox();
        save_sum_images_count = new javax.swing.JTextField();
        sum_image_count_label = new javax.swing.JLabel();
        exposure3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        binning1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        binning2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        binning3 = new javax.swing.JTextField();
        exposure_dark = new javax.swing.JTextField();
        exposure_gain = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CameraStatusText = new javax.swing.JTextArea();
        statusText = new javax.swing.JFormattedTextField();
        smooth1 = new javax.swing.JCheckBox();
        smooth2 = new javax.swing.JCheckBox();
        smooth3 = new javax.swing.JCheckBox();
        save_corrected_sum_images = new javax.swing.JCheckBox();
        save_corrected_raw_data = new javax.swing.JCheckBox();
        conn1Gain = new javax.swing.JCheckBox();
        conn1Dark = new javax.swing.JCheckBox();
        conn2Gain = new javax.swing.JCheckBox();
        conn2Dark = new javax.swing.JCheckBox();
        conn3Gain = new javax.swing.JCheckBox();
        conn3Dark = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(445, 332));

        snapButton1.setText("Snap for display only ");
        snapButton1.setToolTipText("Snap an image for display without saving to disk");
        snapButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButton1ActionPerformed(evt);
            }
        });

        snapSaveButton.setText("Snap with autosave");
        snapSaveButton.setToolTipText("Acquire an image for display without saving to disk");
        snapSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapSaveButtonActionPerformed(evt);
            }
        });

        darkButton.setText("Acquire Dark Reference");
        darkButton.setToolTipText("<html>Acquire a new dark reference<br />(beam will be  blanked automatically by the shutter control box)</html>");
        darkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkButtonActionPerformed(evt);
            }
        });

        gainButton.setText("Acquire Gain Reference");
        gainButton.setToolTipText("<html>Acquire a new gain reference<br />(please navigate to an empty area and set up the beam intensity to match similar brightness as final images)</html>");
        gainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainButtonActionPerformed(evt);
            }
        });

        exposure1.setText("500");
        exposure1.setToolTipText("Exposure time in milliseconds");
        exposure1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure1ActionPerformed(evt);
            }
        });

        jLabel1.setText("msec");

        exposure2.setText("1000");
        exposure2.setToolTipText("Exposure time in milliseconds");
        exposure2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure2ActionPerformed(evt);
            }
        });

        snapButton2.setText("Snap for display only");
        snapButton2.setToolTipText("Snap an image for display without saving to disk");
        snapButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("msec");

        jLabel3.setText("CONDITION 1");

        jLabel4.setText("CONDITION 2");

        jLabel5.setText("CONDITION 3");

        save_final_image.setSelected(true);
        save_final_image.setText("Final Image");
        save_final_image.setToolTipText("Enable saving of the final return image to disk.");
        save_final_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_final_imageActionPerformed(evt);
            }
        });

        save_raw_data.setText("Raw Data");
        save_raw_data.setToolTipText("Enable saving of raw frames to disk");
        save_raw_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_raw_dataActionPerformed(evt);
            }
        });

        save_sum_images.setText("Sum Images");
        save_sum_images.setToolTipText("<html>Enable saving of summed images to disk. <br />Summed images are the sum of sub-groups of multiple frames.</html>");
        save_sum_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_sum_imagesActionPerformed(evt);
            }
        });

        save_sum_images_count.setText("0");
        save_sum_images_count.setToolTipText("<html>Summed image count<br />Number of frames in each grouped summed image. 0 means all frames summed together.</html>");
        save_sum_images_count.setEnabled(false);
        save_sum_images_count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_sum_images_countActionPerformed(evt);
            }
        });

        sum_image_count_label.setText("Sum Image Count");

        exposure3.setText("1000");
        exposure3.setToolTipText("Exposure time in milliseconds");
        exposure3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure3ActionPerformed(evt);
            }
        });

        jLabel7.setText("msec");

        binning1.setText("1");
        binning1.setToolTipText("Binning");

        jLabel8.setText("Bin");

        jLabel9.setText("Bin");

        binning2.setText("1");
        binning2.setToolTipText("Binning");

        jLabel10.setText("Bin");

        binning3.setText("1");
        binning3.setToolTipText("Binning");

        exposure_dark.setText("2000");
        exposure_dark.setToolTipText("Exposure time in milliseconds for dark reference");
        exposure_dark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure_darkActionPerformed(evt);
            }
        });

        exposure_gain.setText("2000");
        exposure_gain.setToolTipText("Exposure time in milliseconds for gain reference");
        exposure_gain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exposure_gainActionPerformed(evt);
            }
        });

        jLabel11.setText("msec");

        jLabel12.setText("msec");

        UpdateButton.setText("Update");
        UpdateButton.setToolTipText("Manually update camera status");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Camera Status");

        CameraStatusText.setEditable(false);
        CameraStatusText.setColumns(30);
        CameraStatusText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CameraStatusText.setLineWrap(true);
        CameraStatusText.setRows(6);
        CameraStatusText.setToolTipText("Camera status information (temperature, faraday reading)");
        jScrollPane1.setViewportView(CameraStatusText);

        statusText.setToolTipText("Displays results of actions in the GUI.");
        statusText.setEnabled(false);
        statusText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusTextActionPerformed(evt);
            }
        });

        smooth1.setText("Smooth");
        smooth1.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        smooth1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smooth1ActionPerformed(evt);
            }
        });

        smooth2.setText("Smooth");
        smooth2.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        smooth2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smooth2ActionPerformed(evt);
            }
        });

        smooth3.setText("Smooth");
        smooth3.setToolTipText("Enable low pass filtering to smooth the image for display purpose only!");
        smooth3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smooth3ActionPerformed(evt);
            }
        });

        save_corrected_sum_images.setText("Save Corrected Sum Images");
        save_corrected_sum_images.setToolTipText("<html>Enable dark/gain correction on saved summed images.</html>");
        save_corrected_sum_images.setEnabled(false);
        save_corrected_sum_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_corrected_sum_imagesActionPerformed(evt);
            }
        });

        save_corrected_raw_data.setText("Save Corrected Raw Images");
        save_corrected_raw_data.setToolTipText("<html>Enable dark/gain correction on saved raw images.</html>");
        save_corrected_raw_data.setEnabled(false);
        save_corrected_raw_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_corrected_raw_dataActionPerformed(evt);
            }
        });

        conn1Gain.setText("Gain");

        conn1Dark.setText("Dark");

        conn2Gain.setText("Gain");

        conn2Dark.setText("Dark");

        conn3Gain.setText("Gain");

        conn3Dark.setText("Dark");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(save_final_image)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save_corrected_sum_images)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(save_sum_images)
                        .addGap(18, 18, 18)
                        .addComponent(sum_image_count_label)
                        .addGap(10, 10, 10)
                        .addComponent(save_sum_images_count, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save_raw_data)
                    .addComponent(save_corrected_raw_data))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(statusText, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(snapSaveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(snapButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(snapButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(exposure2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                    .addComponent(exposure1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(exposure3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(smooth1)
                                            .addComponent(smooth2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(conn2Gain)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(conn2Dark))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(conn1Gain)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(conn1Dark))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(smooth3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(conn3Gain)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(conn3Dark)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(binning2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(binning1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(binning3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(darkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(66, 66, 66))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(170, 170, 170)
                                        .addComponent(exposure_dark, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)))
                                .addGap(35, 35, 35)
                                .addComponent(gainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exposure_gain, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addGap(27, 27, 27)))))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(snapButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exposure1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(smooth1)
                    .addComponent(conn1Gain)
                    .addComponent(conn1Dark)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(binning1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(snapButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exposure2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smooth2)
                    .addComponent(jLabel2)
                    .addComponent(conn2Gain)
                    .addComponent(conn2Dark)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(binning2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(snapSaveButton)
                    .addComponent(exposure3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(smooth3)
                    .addComponent(conn3Gain)
                    .addComponent(conn3Dark)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(binning3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(save_final_image)
                    .addComponent(save_sum_images)
                    .addComponent(sum_image_count_label)
                    .addComponent(save_sum_images_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save_raw_data))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(save_corrected_sum_images)
                    .addComponent(save_corrected_raw_data))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exposure_gain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(darkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exposure_dark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(UpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {snapButton1, snapSaveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void save_corrected_raw_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_corrected_raw_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_save_corrected_raw_dataActionPerformed

    private void save_corrected_sum_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_corrected_sum_imagesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_save_corrected_sum_imagesActionPerformed

    private void smooth3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smooth3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smooth3ActionPerformed

    private void smooth2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smooth2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smooth2ActionPerformed

    private void smooth1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smooth1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smooth1ActionPerformed

    private void statusTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTextActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        UpdateCameraStatus();
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void exposure_gainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure_gainActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposure_gainActionPerformed

    private void exposure_darkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure_darkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposure_darkActionPerformed

    private void exposure3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposure3ActionPerformed

    private void save_sum_images_countActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_sum_images_countActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_save_sum_images_countActionPerformed

    private void save_sum_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_sum_imagesActionPerformed
        if (!save_sum_images.isSelected()) {
            sum_image_count_label.setEnabled(false);
            save_sum_images_count.setEnabled(false);
            save_corrected_sum_images.setEnabled(false);
        } else {
            sum_image_count_label.setEnabled(true);
            save_sum_images_count.setEnabled(true);
            save_corrected_sum_images.setEnabled(true);
        }
    }//GEN-LAST:event_save_sum_imagesActionPerformed

    private void save_raw_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_raw_dataActionPerformed
        if (!save_raw_data.isSelected()) {
            save_corrected_raw_data.setEnabled(false);
        } else {
            save_corrected_raw_data.setEnabled(true);
        }
    }//GEN-LAST:event_save_raw_dataActionPerformed

    private void save_final_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_final_imageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_save_final_imageActionPerformed

    private void snapButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButton2ActionPerformed
        // Snap a single image without autosaving
        try {
            int exposure_time = 0;
            try {
                exposure_time = Integer.parseInt(exposure2.getText());
            } catch (NumberFormatException e) {
                exposure_time = 0;
            }
            int binning_option = 1;
            try {
                binning_option = Integer.parseInt(binning2.getText());
            } catch (NumberFormatException e) {
                binning_option = 1;
            }
            if (exposure_time != 0) {
                String position = core_.getProperty(currentCamera, "Camera Position Status");
                int result = 0;
                if (!ignoreRetractedWarning && !("Extended".equals(position))) {
                    Object stringArray[] = {"Extend", "Continue", "Continue (ignore same warning)"};
                    result = JOptionPane.showOptionDialog(null, "Camera is not extended. Do you want to insert the camera?", "Alert Messages",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, stringArray[0]);
                    if (result == JOptionPane.YES_OPTION) {
                        // insert camera command;
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    extend_dialog = new NoticeWaitDialog(MainFrame.this, false);
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    core_.setProperty(currentCamera, "Camera Position", "Extended");
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                       
                        // wait for the camera to extend
                        int extend_timeout = 0;
                        String new_position = "";
                        while (!new_position.equals("Extended") && extend_timeout < 10) {
                            Thread.sleep(1000); //max 10 seconds time out
                            extend_timeout++;
                            new_position = core_.getProperty(currentCamera, "Camera Position Status");
                        }
                        extend_dialog.dispose();
                        position = core_.getProperty(currentCamera, "Camera Position Status");
                    } else if (result == JOptionPane.CANCEL_OPTION) {
                        ignoreRetractedWarning = true;
                    }
                }
                if ("Extended".equals(position) || result == JOptionPane.NO_OPTION || ignoreRetractedWarning) {
                    StoreOriginalSettings(); //store the original values					
					core_.setProperty(currentCamera, "Exposure Mode", "Normal"); //set to normal acquisition
                    String correctionModeString = "Gain and Dark Corrected";
                    boolean dark = conn2Dark.isSelected();
                    boolean gain = conn2Gain.isSelected();
                    correctionModeString = buildCorrectionModeString(dark, gain);
                    core_.setProperty(currentCamera, "Correction Mode", correctionModeString);
                    UpdateAutoSavingOptions("Discard", "Discard", "Discard", "Disable", "Disable");
                    core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
                    double exp_time = exposure_time / 1000.0;
                    String exp_time_value = Double.toString(exp_time);
                    core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
                    final String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
                    final NoticeWaitDialog dialog = new NoticeWaitDialog(this, false);
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            try {
                                core_.snapImage();
                                if (smooth2.isSelected()) {
                                    ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                                    image_data.smooth();
                                    gui_.displayImage(image_data.getPixels());
                                } else {
                                    gui_.displayImage(core_.getImage());
                                }
                                dialog.dispose();
                                RestoreOriginalSettings(); //restore original values
                                statusText.setText("A new image acquired for display only with exposure time of " + actual_exp_time + " seconds.");
                            } catch (Exception e) {
                            }
                        }
                    });

                } else {
                    statusText.setText("Please insert camera");
                    JOptionPane.showMessageDialog(null, "Please insert camera");
                }
            } else {
                statusText.setText("Incorrect exposure setting. ");
            }
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
        UpdateCameraStatus();
    }//GEN-LAST:event_snapButton2ActionPerformed

    private void exposure2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposure2ActionPerformed

    private void exposure1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exposure1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exposure1ActionPerformed

    private void gainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainButtonActionPerformed
        // Take gain reference
        int exposure_time = 0;
        try {
            exposure_time = Integer.parseInt(exposure_gain.getText());
        } catch (NumberFormatException e) {
            exposure_time = 0;
        }
        if (exposure_time != 0) {
            int choice = JOptionPane.showConfirmDialog(null, "You are about to acquire an uniform illumination image (" + Integer.toString(exposure_time) + " millisec) as the flat field reference. Are you sure?", "Gain Reference Acquisition", JOptionPane.YES_NO_OPTION);
            if (choice != 0) {
                return; //YES=0 to continue
            }
            try {
                StoreOriginalSettings();
                core_.setProperty(currentCamera, "Correction Mode", "Dark Corrected"); //set to dark corrected for the gain reference
                UpdateAutoSavingOptions("Save", "Save", "Discard", "Disable", "Disable"); //store raw frames for gain reference
                double exp_time = exposure_time / 1000.0;
                String exp_time_value = Double.toString(exp_time);
                core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
                final String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
                core_.setProperty(currentCamera, "Binning", "1");
                core_.setProperty(currentCamera, "Exposure Mode", "Gain"); //set to gain reference acquisition
                final NoticeWaitDialog dialog = new NoticeWaitDialog(this, false);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            core_.snapImage();
                            short[] img = (short[]) core_.getImage();
                            gui_.displayImage(img);
                            dialog.dispose();
                            RestoreOriginalSettings();
                            statusText.setText("Gain reference acquired with " + actual_exp_time + " seconds exposure.");
                        } catch (Exception e) {
                        }
                    }
                });

            } catch (Exception ex) {
                ReportingUtils.showError(ex);
            }
        } else {
            statusText.setText("Incorrect exposure setting. ");
        }

        UpdateCameraStatus();
    }//GEN-LAST:event_gainButtonActionPerformed

    private void darkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkButtonActionPerformed
        // Take dark reference
        int exposure_time = 0;
        try {
            exposure_time = Integer.parseInt(exposure_dark.getText());
        } catch (NumberFormatException e) {
            exposure_time = 0;
        }
        if (exposure_time != 0) {
            int choice = JOptionPane.showConfirmDialog(null, "You are about to acquire a new dark reference (" + Integer.toString(exposure_time) + " millisec). Are you sure?", "Dark Reference Acquisition", JOptionPane.YES_NO_OPTION);
            if (choice != 0) {
                return; //YES=0 to continue
            }
            try {
                StoreOriginalSettings(); //store the original values
                core_.setProperty(currentCamera, "Correction Mode", "Uncorrected Raw"); //set to uncorrected for the dark reference
                UpdateAutoSavingOptions("Save", "Save", "Discard", "Disable", "Disable"); //store raw frames for dark reference
                double exp_time = exposure_time / 1000.0;
                String exp_time_value = Double.toString(exp_time);
                core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
                final String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
                core_.setProperty(currentCamera, "Binning", "1");
                core_.setProperty(currentCamera, "Exposure Mode", "Dark"); //set to dark reference acquisition
                final NoticeWaitDialog dialog = new NoticeWaitDialog(this, false);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            core_.snapImage();
                            short[] img = (short[]) core_.getImage();
                            gui_.displayImage(img);
                            dialog.dispose();
                            RestoreOriginalSettings(); //restore original values
                            statusText.setText("Dark reference acquired with " + actual_exp_time + " seconds exposure.");
                            gui_.refreshGUI();
                        } catch (Exception e) {
                        }
                    }
                });

            } catch (Exception ex) {
                ReportingUtils.showError(ex);
            }
        } else {
            statusText.setText("Incorrect exposure setting. ");
        }

        UpdateCameraStatus();
    }//GEN-LAST:event_darkButtonActionPerformed

    private void snapSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapSaveButtonActionPerformed
        // Snap a new image with autosave flag turned on
        try {
            int exposure_time = 0;
            try {
                exposure_time = Integer.parseInt(exposure3.getText());
            } catch (NumberFormatException e) {
                exposure_time = 0;
            }
            int binning_option = 1;
            try {
                binning_option = Integer.parseInt(binning3.getText());
            } catch (NumberFormatException e) {
                binning_option = 1;
            }
            int sum_image_count = 0;
            try {
                sum_image_count = Integer.parseInt(save_sum_images_count.getText());
            } catch (NumberFormatException e) {
                sum_image_count = 0;
            }
            if (exposure_time != 0) {
                String position = core_.getProperty(currentCamera, "Camera Position Status");
                int result = 0;
                if (!ignoreRetractedWarning && !("Extended".equals(position))) {
                    Object stringArray[] = {"Extend", "Continue", "Continue (ignore same warning)"};
                    result = JOptionPane.showOptionDialog(null, "Camera is not extended. Do you want to insert the camera?", "Alert Messages",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, stringArray[0]);
                    if (result == JOptionPane.YES_OPTION) {
                        // insert camera command;
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    extend_dialog = new NoticeWaitDialog(MainFrame.this, false);
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    core_.setProperty(currentCamera, "Camera Position", "Extended");
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                       
                        // wait for the camera to extend
                        int extend_timeout = 0;
                        String new_position = "";
                        while (!new_position.equals("Extended") && extend_timeout < 10) {
                            Thread.sleep(1000); //max 10 seconds time out
                            extend_timeout++;
                            new_position = core_.getProperty(currentCamera, "Camera Position Status");
                        }
                        extend_dialog.dispose();
                        position = core_.getProperty(currentCamera, "Camera Position Status");
                    } else if (result == JOptionPane.CANCEL_OPTION) {
                        ignoreRetractedWarning = true;
                    }
                }
                if ("Extended".equals(position) || result == JOptionPane.NO_OPTION || ignoreRetractedWarning) {
                    StoreOriginalSettings(); //store the original values
                    core_.setProperty(currentCamera, "Exposure Mode", "Normal"); //set to normal acquisition
					String correctionModeString = "Gain and Dark Corrected";
                    boolean dark = conn3Dark.isSelected();
                    boolean gain = conn3Gain.isSelected();
                    correctionModeString = buildCorrectionModeString(dark, gain);
                    core_.setProperty(currentCamera, "Correction Mode", correctionModeString);
                    core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
                    UpdateAutoSavingOptions((save_final_image.isSelected()) ? "Save" : "Discard", (save_raw_data.isSelected()) ? "Save" : "Discard", (save_sum_images.isSelected()) ? "Save" : "Discard", (save_corrected_raw_data.isSelected()) ? "Enable" : "Disable", (save_corrected_sum_images.isSelected()) ? "Enable" : "Disable");
                    if (save_sum_images.isSelected()) {
                        core_.setProperty(currentCamera, "Autosave Sum Frames - Sum Count", sum_image_count);
                    } else {
                        core_.setProperty(currentCamera, "Autosave Sum Frames - Sum Count", "0");
                    }
                    double exp_time = exposure_time / 1000.0;
                    String exp_time_value = Double.toString(exp_time);
                    core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
                    final String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
                    final NoticeWaitDialog dialog = new NoticeWaitDialog(this, false);
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            try {
                                core_.snapImage();

                                if (smooth3.isSelected()) {
                                    ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                                    image_data.smooth();
                                    gui_.displayImage(image_data.getPixels());
                                } else {
                                    gui_.displayImage(core_.getImage());
                                }
                                dialog.dispose();
                                RestoreOriginalSettings(); //restore original values
                                statusText.setText("A new image acquired with exposure time of " + actual_exp_time + " seconds.");
                            } catch (Exception e) {
                            }
                        }
                    });

                } else {
                    statusText.setText("Please insert camera");
                    JOptionPane.showMessageDialog(null, "Camera retracted. Please insert camera");
                }

            } else {
                statusText.setText("Incorrect exposure setting. ");
            }
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
        UpdateCameraStatus();
    }//GEN-LAST:event_snapSaveButtonActionPerformed

    private void snapButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButton1ActionPerformed
        // Snap a single image without autosaving
        try {
            int exposure_time = 0;
            try {
                exposure_time = Integer.parseInt(exposure1.getText());
            } catch (NumberFormatException e) {
                exposure_time = 0;
            }
            int binning_option = 1;
            try {
                binning_option = Integer.parseInt(binning1.getText());
            } catch (NumberFormatException e) {
                binning_option = 1;
            }
            if (exposure_time != 0) {
                String position = core_.getProperty(currentCamera, "Camera Position Status");
                int result = 0;
                if (!ignoreRetractedWarning && !("Extended".equals(position))) {
                    Object stringArray[] = {"Extend", "Continue", "Continue (ignore same warning)"};
                    result = JOptionPane.showOptionDialog(null, "Camera is not extended. Do you want to insert the camera?", "Alert Messages",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, stringArray[0]);
                    if (result == JOptionPane.YES_OPTION) {
                        // insert camera command;
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    extend_dialog = new NoticeWaitDialog(MainFrame.this, false);
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                        new Thread(new Runnable() {
                            public void run() {
                                try {
                                    core_.setProperty(currentCamera, "Camera Position", "Extended");
                                } catch (Exception ex) {
                                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }).start();
                       
                        // wait for the camera to extend
                        int extend_timeout = 0;
                        String new_position = "";
                        while (!new_position.equals("Extended") && extend_timeout < 10) {
                            Thread.sleep(1000); //max 10 seconds time out
                            extend_timeout++;
                            new_position = core_.getProperty(currentCamera, "Camera Position Status");
                        }
                        extend_dialog.dispose();
                        position = core_.getProperty(currentCamera, "Camera Position Status");
                        
                    } else if (result == JOptionPane.CANCEL_OPTION) {
                        ignoreRetractedWarning = true;
                    }
                }
                if ("Extended".equals(position) || result == JOptionPane.NO_OPTION || ignoreRetractedWarning) {
                    StoreOriginalSettings(); //store the original values
					core_.setProperty(currentCamera, "Exposure Mode", "Normal"); //set to normal acquisition
                    String correctionModeString = "Gain and Dark Corrected";
                    boolean dark = conn1Dark.isSelected();
                    boolean gain = conn1Gain.isSelected();
                    correctionModeString = buildCorrectionModeString(dark, gain);
                    core_.setProperty(currentCamera, "Correction Mode", correctionModeString);
                    UpdateAutoSavingOptions("Discard", "Discard", "Discard", "Disable", "Disable"); //store raw frames for gain reference
                    core_.setProperty(currentCamera, "Binning", Integer.toString(binning_option));
                    double exp_time = exposure_time / 1000.0;
                    String exp_time_value = Double.toString(exp_time);
                    core_.setProperty(currentCamera, "Exposure Time (seconds)", exp_time_value); //set to desired exposure
                    final String actual_exp_time = core_.getProperty(currentCamera, "Exposure Time (seconds)"); //get the actual exposure time
                    dialog = new NoticeWaitDialog(MainFrame.this, false);
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            try {
                                core_.snapImage();

                                if (smooth1.isSelected()) {
                                    ImageProcessor image_data = ImageUtils.makeProcessor(core_, core_.getImage());
                                    image_data.smooth();
                                    gui_.displayImage(image_data.getPixels());
                                } else {
                                    gui_.displayImage(core_.getImage());
                                }
                                dialog.dispose();
                                RestoreOriginalSettings(); //restore original values
                                statusText.setText("A new image acquired for display only with exposure time of " + actual_exp_time + " seconds.");
                            } catch (Exception e) {
                            }

                        }
                    });

                } else {
                    statusText.setText("Please insert camera");
                    JOptionPane.showMessageDialog(null, "Camera retracted. Please insert camera");
                }
            } else {
                statusText.setText("Incorrect exposure setting. ");
            }
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
        UpdateCameraStatus();
    }//GEN-LAST:event_snapButton1ActionPerformed
    private NoticeWaitDialog dialog;
    public void UpdateCameraStatus() {
        try {
            String displayText = "";
            String position = core_.getProperty(currentCamera, "Camera Position Status");
            String temperature = core_.getProperty(currentCamera, "Temperature - Detector (Celsius)");
            String instant_intensity = core_.getProperty(currentCamera, "Faraday Plate - Beam Density (pA/cm^2)");
            displayText += "Camera position: " + position + "\n";
            displayText += "Detector temperature: " + temperature + " Celsius.\n";
            displayText += "Faraday plate instantaneous reading: " + instant_intensity + " pA/cm2.\n";
            String peak_intensity = core_.getProperty(currentCamera, "Faraday Plate - Last Exposure Peak Density (pA/cm^2)");
            String peak_dose_rate = core_.getProperty(currentCamera, "Faraday Plate - Last Exposure Peak Density (electron/pixel/second)");
            String last_exposure_total_dose = core_.getProperty(currentCamera, "Faraday Plate - Total Dose in Last Exposure (electron/pixel)");
            displayText += "Last exposure (total dose): " + last_exposure_total_dose + " el-/pixel.\n";
            displayText += "Last exposure (peak intensity): " + peak_intensity + " pA/cm2 or " + peak_dose_rate + " el-/px/sec.\n";
            String failsafe_status = core_.getProperty(currentCamera, "Camera Failsafe Status");
            displayText += "Camera Failsafe Status: " + failsafe_status + "\n";
            CameraStatusText.setText(displayText);
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
    }

    private void UpdateAutoSavingOptions(String save_final, String save_raw, String save_summed, String save_corrected_raw, String save_corrected_sum) {
        try {
            core_.setProperty(currentCamera, "Autosave Final Image", save_final);
            core_.setProperty(currentCamera, "Autosave Raw Frames", save_raw);
            core_.setProperty(currentCamera, "Autosave Summed Image", save_summed);
            core_.setProperty(currentCamera, "Autosave Raw Frames - Save Correction", save_corrected_raw);
            core_.setProperty(currentCamera, "Autosave Sum Frames - Save Correction", save_corrected_sum);
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
    }

    private void StoreOriginalSettings() {
        try {
            stored_property_list.clear();
            String property_title = "";
            property_title = "Autosave Final Image";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Raw Frames";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Raw Frames - Save Correction";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Summed Image";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Sum Frames - Sum Count";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Autosave Sum Frames - Save Correction";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Binning";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Exposure Time (seconds)";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Exposure Mode";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
            property_title = "Correction Mode";
            stored_property_list.put(property_title, core_.getProperty(currentCamera, property_title));
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
    }

    private void RestoreOriginalSettings() {
        try {
            for (Map.Entry<String, String> entry : stored_property_list.entrySet()) {
                core_.setProperty(currentCamera, entry.getKey(), entry.getValue());
            }
        } catch (Exception ex) {
            ReportingUtils.showError(ex);
        }
    }
    private String configCacheFileDir = System.getenv().get("APPDATA") + File.separator + "Direct Electron";
    private final String fileName = "directElectron.cfg";

    /**
     * Store current configuration to file.
     *
     */
    public void cacheConfigToFile() {
        File file = new File(configCacheFileDir + File.separator + fileName);
        CameraDataConfig config = new CameraDataConfig();

        extractData(config);
        try {
            ObjectWriter.writerObjectToFile(file, config);
        } catch (Exception e) {
            //TODO log exception
        }
    }

    public void extractData(CameraDataConfig config) {
        if (config == null) {
            return;
        }
        config.setFinalImage(save_final_image.isSelected());
        config.setSumImages(save_sum_images.isSelected());
        config.setSumImagesCount(Integer.parseInt(save_sum_images_count.getText().trim()));
        config.setRawData(save_raw_data.isSelected());
        config.setSaveCurrentSumImages(save_corrected_sum_images.isSelected());
        config.setSaveCurrentRawData(save_corrected_raw_data.isSelected());
        config.setAcquireDarkReference(Integer.parseInt(exposure_dark.getText().trim()));
        config.setAcquireGainReference(Integer.parseInt(exposure_gain.getText().trim()));
        ConditionConfig con1 = new ConditionConfig();

        con1.setMsec(Integer.parseInt(exposure1.getText().trim()));
        con1.setSmooth(smooth1.isSelected());
        con1.setGain(conn1Gain.isSelected());
        con1.setDark(conn1Dark.isSelected());
        con1.setBin(Integer.parseInt(binning1.getText().trim()));

        config.setCondition1(con1);
        ConditionConfig con2 = new ConditionConfig();

        con2.setMsec(Integer.parseInt(exposure2.getText().trim()));
        con2.setSmooth(smooth2.isSelected());
        con2.setGain(conn2Gain.isSelected());
        con2.setDark(conn2Dark.isSelected());
        con2.setBin(Integer.parseInt(binning2.getText().trim()));

        config.setCondition2(con2);
        ConditionConfig con3 = new ConditionConfig();

        con3.setMsec(Integer.parseInt(exposure3.getText().trim()));
        con3.setSmooth(smooth3.isSelected());
        con3.setGain(conn3Gain.isSelected());
        con3.setDark(conn3Dark.isSelected());
        con3.setBin(Integer.parseInt(binning3.getText().trim()));

        config.setCondition3(con3);
    }

    private void buildCleaDefaultConfig(CameraDataConfig config) {
        config.setFinalImage(true);
        config.setSumImages(false);
        config.setSumImagesCount(0);
        config.setRawData(false);
        config.setSaveCurrentSumImages(false);
        config.setSaveCurrentRawData(false);
        config.setAcquireDarkReference(2000);
        config.setAcquireGainReference(2000);
        ConditionConfig con1 = new ConditionConfig();

        con1.setMsec(500);
        con1.setSmooth(false);
        con1.setGain(true);
        con1.setDark(true);
        con1.setBin(1);

        config.setCondition1(con1);
        ConditionConfig con2 = new ConditionConfig();

        con2.setMsec(1000);
        con2.setSmooth(false);
        con2.setGain(true);
        con2.setDark(true);
        con2.setBin(1);

        config.setCondition2(con2);
        ConditionConfig con3 = new ConditionConfig();

        con3.setMsec(1000);
        con3.setSmooth(false);
        con3.setGain(true);
        con3.setDark(true);
        con3.setBin(1);

        config.setCondition3(con3);
    }

    public void loadCachedConfig() {
        CameraDataConfig config = new CameraDataConfig();
        File file = new File(configCacheFileDir + File.separator + fileName);
        extractData(config);
        try {
            if (!file.exists()) {
                buildCleaDefaultConfig(config);
            } else {
                Object object = ObjectReader.ReadObjectFromFile(file);
                if (object instanceof CameraDataConfig) {
                    config = (CameraDataConfig) object;
                } else {
                    buildCleaDefaultConfig(config);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }


        loadConfig(config);
    }

    private void loadConfig(CameraDataConfig config) {
        if (config == null) {
            return;
        }
        save_final_image.setSelected(config.isFinalImage());
        save_sum_images.setSelected(config.isSumImages());
        save_sum_images_count.setText(config.getSumImagesCount() + "");
        save_sum_images_count.setEnabled(config.isSumImages());
        save_raw_data.setSelected(config.isRawData());
        save_corrected_sum_images.setSelected(config.isSaveCurrentSumImages());
        save_corrected_sum_images.setEnabled(config.isSumImages());
        save_corrected_raw_data.setSelected(config.isSaveCurrentRawData());
        save_corrected_raw_data.setEnabled(config.isRawData());
        exposure_dark.setText(config.getAcquireDarkReference() + "");
        exposure_gain.setText(config.getAcquireGainReference() + "");
        ConditionConfig con1 = config.getCondition1();
        if (con1 != null) {
            exposure1.setText(con1.getMsec() + "");
            smooth1.setSelected(con1.isSmooth());
            conn1Gain.setSelected(con1.isGain());
            conn1Dark.setSelected(con1.isDark());
            binning1.setText(con1.getBin() + "");
        }
        ConditionConfig con2 = config.getCondition2();
        if (con2 != null) {
            exposure2.setText(con2.getMsec() + "");
            smooth2.setSelected(con2.isSmooth());
            conn2Gain.setSelected(con2.isGain());
            conn2Dark.setSelected(con2.isDark());
            binning2.setText(con2.getBin() + "");
        }
        ConditionConfig con3 = config.getCondition3();
        if (con3 != null) {
            exposure3.setText(con3.getMsec() + "");
            smooth3.setSelected(con3.isSmooth());
            conn3Gain.setSelected(con3.isGain());
            conn3Dark.setSelected(con3.isDark());
            binning3.setText(con3.getBin() + "");
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        System.out.print(System.getenv().get("APPDATA"));
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MainFrame(gui_).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CameraStatusText;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTextField binning1;
    private javax.swing.JTextField binning2;
    private javax.swing.JTextField binning3;
    private javax.swing.JCheckBox conn1Dark;
    private javax.swing.JCheckBox conn1Gain;
    private javax.swing.JCheckBox conn2Dark;
    private javax.swing.JCheckBox conn2Gain;
    private javax.swing.JCheckBox conn3Dark;
    private javax.swing.JCheckBox conn3Gain;
    private javax.swing.JButton darkButton;
    private javax.swing.JTextField exposure1;
    private javax.swing.JTextField exposure2;
    private javax.swing.JTextField exposure3;
    private javax.swing.JTextField exposure_dark;
    private javax.swing.JTextField exposure_gain;
    private javax.swing.JButton gainButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox save_corrected_raw_data;
    private javax.swing.JCheckBox save_corrected_sum_images;
    private javax.swing.JCheckBox save_final_image;
    private javax.swing.JCheckBox save_raw_data;
    private javax.swing.JCheckBox save_sum_images;
    private javax.swing.JTextField save_sum_images_count;
    private javax.swing.JCheckBox smooth1;
    private javax.swing.JCheckBox smooth2;
    private javax.swing.JCheckBox smooth3;
    private javax.swing.JButton snapButton1;
    private javax.swing.JButton snapButton2;
    private javax.swing.JButton snapSaveButton;
    private javax.swing.JFormattedTextField statusText;
    private javax.swing.JLabel sum_image_count_label;
    // End of variables declaration//GEN-END:variables

    private String buildCorrectionModeString(boolean dark, boolean gain) {
        String correctionModeString;
        if (dark && gain) {
            correctionModeString = "Gain and Dark Corrected";
        } else if (dark) {
            correctionModeString = "Dark Corrected";
        } else {
            correctionModeString = "Uncorrected Raw";
        }
        return correctionModeString;
    }
}
